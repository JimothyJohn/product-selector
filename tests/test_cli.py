"""
Tests for the simplified CLI functionality.

AI-generated comment: This test suite has been updated to work with the new simplified
CLI interface that uses argparse instead of Click and focuses on basic functionality
rather than document analysis. The tests verify argument parsing, validation, and
output formatting for the generic template.
"""

import json
import tempfile
import sys
import os
from pathlib import Path
from unittest.mock import Mock, patch, MagicMock
from typing import Generator

import pytest

# Add the lambda app directory to the Python path for importing CLI modules
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../lambda/app'))

from __main__ import main, format_response, create_parser
from utils import validate_url, validate_api_key


class TestCLIValidation:
    """
    Test CLI argument validation functions.
    
    AI-generated comment: Updated to test the new argparse-based validation functions
    that are used by the simplified CLI interface.
    """
    
    def test_validate_url_valid_https(self) -> None:
        """Test that valid HTTPS URLs pass validation."""
        result = validate_url("https://example.com/document.pdf")
        assert result == "https://example.com/document.pdf"
    
    def test_validate_url_valid_http(self) -> None:
        """Test that valid HTTP URLs pass validation."""
        result = validate_url("http://example.com/document.pdf")
        assert result == "http://example.com/document.pdf"
    
    def test_validate_url_invalid_protocol(self) -> None:
        """Test that invalid URL protocols raise ValueError."""
        with pytest.raises(ValueError, match="URL must use http or https scheme"):
            validate_url("ftp://example.com/document.pdf")
    
    def test_validate_url_invalid_format(self) -> None:
        """Test that malformed URLs raise ValueError."""
        with pytest.raises(ValueError, match="Invalid URL format"):
            validate_url("not-a-url")
    
    def test_validate_api_key_valid(self) -> None:
        """Test that valid API keys pass validation."""
        result = validate_api_key("test-api-key-12345")
        assert result == "test-api-key-12345"
    
    def test_validate_api_key_too_short(self) -> None:
        """Test that API keys that are too short raise ValueError."""
        with pytest.raises(ValueError, match="API key appears to be too short"):
            validate_api_key("short")
    
    def test_validate_api_key_empty(self) -> None:
        """Test that empty API keys raise ValueError."""
        with pytest.raises(ValueError, match="API key cannot be empty"):
            validate_api_key("")
    
    def test_validate_api_key_whitespace_only(self) -> None:
        """Test that whitespace-only API keys raise ValueError."""
        with pytest.raises(ValueError, match="API key cannot be empty"):
            validate_api_key("   ")


class TestResponseFormatting:
    """
    Test response formatting functionality.
    
    AI-generated comment: Updated to test the simplified response formatting
    that works with the placeholder responses from the new interface.
    """
    
    def test_format_response_text(self) -> None:
        """Test text format output (default)."""
        response = "Hello, world!"
        result = format_response(response, "text")
        assert result == response
    
    def test_format_response_json(self) -> None:
        """Test JSON format output."""
        response = "Hello, world!"
        result = format_response(response, "json")
        
        # Parse JSON to verify structure
        parsed = json.loads(result)
        assert parsed["response"] == response
        assert parsed["status"] == "success"
        assert "timestamp" in parsed
    
    def test_format_response_markdown(self) -> None:
        """Test markdown format output."""
        response = "Hello, world!"
        result = format_response(response, "markdown")
        
        assert result.startswith("# Document Analysis Response")
        assert response in result
        assert "*Generated by Datasheetminer CLI*" in result


class TestCLIExecution:
    """
    Test CLI execution and argument handling.
    
    AI-generated comment: Updated to test the new argparse-based CLI interface
    that doesn't use streaming responses or external API calls.
    """
    
    @pytest.fixture
    def mock_main_exit(self):
        """Mock sys.exit to prevent actual program termination during tests."""
        with patch('sys.exit') as mock_exit:
            yield mock_exit
    
    def test_parser_creation(self) -> None:
        """Test that the argument parser is created correctly."""
        parser = create_parser()
        assert parser.prog == "datasheetminer"
        assert "Datasheetminer CLI" in parser.description
    
    def test_cli_help(self, mock_main_exit, capsys) -> None:
        """Test that CLI help is displayed correctly."""
        # Mock sys.argv to simulate --help
        with patch('sys.argv', ['datasheetminer', '--help']):
            try:
                main()
            except SystemExit:
                pass  # argparse calls sys.exit(0) for --help
        
        captured = capsys.readouterr()
        assert "Datasheetminer CLI" in captured.out
        assert "--prompt" in captured.out
        assert "--url" in captured.out
        assert "--x-api-key" in captured.out
    
    def test_cli_missing_required_args(self, mock_main_exit, capsys) -> None:
        """Test that CLI fails when required arguments are missing."""
        with patch('sys.argv', ['datasheetminer']):
            main()
            
        mock_main_exit.assert_called_with(1)
        captured = capsys.readouterr()
        assert "API key is required" in captured.err
    
    def test_cli_missing_prompt(self, mock_main_exit, capsys) -> None:
        """Test that CLI fails when prompt is missing."""
        with patch('sys.argv', ['datasheetminer', '--url', 'https://example.com/test.pdf']):
            try:
                main()
            except SystemExit:
                pass
                
        captured = capsys.readouterr()
        assert "required" in captured.err and "prompt" in captured.err
    
    def test_cli_missing_url(self, mock_main_exit, capsys) -> None:
        """Test that CLI fails when URL is missing."""
        with patch('sys.argv', ['datasheetminer', '--prompt', 'test prompt']):
            try:
                main()
            except SystemExit:
                pass
                
        captured = capsys.readouterr()
        assert "required" in captured.err and "url" in captured.err
    
    def test_cli_basic_execution(self, capsys) -> None:
        """Test basic CLI execution with all required arguments."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'https://example.com/test.pdf',
            '--x-api-key', 'test-api-key-12345'
        ]
        
        with patch('sys.argv', test_args):
            main()
        
        captured = capsys.readouterr()
        assert "Hello, world!" in captured.out
    
    def test_cli_with_output_file(self, capsys) -> None:
        """Test CLI execution with output file specified."""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as tmp_file:
            tmp_path = Path(tmp_file.name)
        
        try:
            test_args = [
                'datasheetminer',
                '--prompt', 'Test prompt',
                '--url', 'https://example.com/test.pdf',
                '--x-api-key', 'test-api-key-12345',
                '--output', str(tmp_path)
            ]
            
            with patch('sys.argv', test_args):
                main()
            
            captured = capsys.readouterr()
            assert f"Response saved to: {tmp_path}" in captured.err
            
            # Verify file was created and contains the response
            assert tmp_path.exists()
            content = tmp_path.read_text()
            assert "Hello, world!" in content
            
        finally:
            # Clean up
            if tmp_path.exists():
                tmp_path.unlink()
    
    def test_cli_json_output(self, capsys) -> None:
        """Test CLI execution with JSON output format."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'https://example.com/test.pdf',
            '--x-api-key', 'test-api-key-12345',
            '--format', 'json'
        ]
        
        with patch('sys.argv', test_args):
            main()
        
        captured = capsys.readouterr()
        
        # Parse the JSON output
        try:
            parsed = json.loads(captured.out)
            assert parsed["status"] == "success"
            assert "Hello, world!" in parsed["response"]
        except json.JSONDecodeError:
            pytest.fail("Output is not valid JSON")
    
    def test_cli_markdown_output(self, capsys) -> None:
        """Test CLI execution with markdown output format."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'https://example.com/test.pdf',
            '--x-api-key', 'test-api-key-12345',
            '--format', 'markdown'
        ]
        
        with patch('sys.argv', test_args):
            main()
        
        captured = capsys.readouterr()
        assert captured.out.startswith("# Document Analysis Response")
        assert "Hello, world!" in captured.out
        assert "*Generated by Datasheetminer CLI*" in captured.out
    
    def test_cli_verbose_mode(self, capsys) -> None:
        """Test CLI execution with verbose logging enabled."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'https://example.com/test.pdf',
            '--x-api-key', 'test-api-key-12345',
            '--verbose'
        ]
        
        with patch('sys.argv', test_args):
            main()
        
        captured = capsys.readouterr()
        # Verbose mode should show additional logging
        assert "Hello, world!" in captured.out
    
    def test_cli_short_options(self, capsys) -> None:
        """Test CLI execution with short option names."""
        test_args = [
            'datasheetminer',
            '-p', 'Test prompt',
            '-u', 'https://example.com/test.pdf',
            '--x-api-key', 'test-api-key-12345'
        ]
        
        with patch('sys.argv', test_args):
            main()
        
        captured = capsys.readouterr()
        assert "Hello, world!" in captured.out
    
    def test_cli_invalid_url(self, capsys) -> None:
        """Test CLI execution with invalid URL format."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'invalid-url',
            '--x-api-key', 'test-api-key-12345'
        ]
        
        with patch('sys.argv', test_args):
            try:
                main()
            except SystemExit:
                pass
        
        captured = capsys.readouterr()
        assert "Invalid URL format" in captured.err
    
    def test_cli_invalid_api_key(self, capsys) -> None:
        """Test CLI execution with invalid API key."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'https://example.com/test.pdf',
            '--x-api-key', 'short'
        ]
        
        with patch('sys.argv', test_args):
            try:
                main()
            except SystemExit:
                pass
        
        captured = capsys.readouterr()
        assert "API key appears to be too short" in captured.err


class TestCLIErrorHandling:
    """
    Test CLI error handling and edge cases.
    
    AI-generated comment: Updated to test error handling in the simplified CLI
    interface that doesn't perform external API calls or complex processing.
    """
    
    def test_cli_missing_api_key_env_var(self, capsys) -> None:
        """Test CLI handling when API key environment variable is not set."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'https://example.com/test.pdf'
        ]
        
        # Ensure GEMINI_API_KEY is not set
        with patch.dict(os.environ, {}, clear=True):
            with patch('sys.argv', test_args):
                main()
        
        captured = capsys.readouterr()
        assert "API key is required" in captured.err
    
    def test_cli_env_var_api_key(self, capsys) -> None:
        """Test CLI with API key from environment variable."""
        test_args = [
            'datasheetminer',
            '--prompt', 'Test prompt',
            '--url', 'https://example.com/test.pdf'
        ]
        
        # Set API key via environment variable
        with patch.dict(os.environ, {'GEMINI_API_KEY': 'test-api-key-12345'}):
            with patch('sys.argv', test_args):
                main()
        
        captured = capsys.readouterr()
        assert "Hello, world!" in captured.out


if __name__ == "__main__":
    pytest.main([__file__])
