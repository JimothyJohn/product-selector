# Environment Variables for Product Selector Project
# This file documents all environment variables used in development, testing, and CI/CD

# =============================================================================
# LOCAL DEVELOPMENT
# =============================================================================

# Logging Configuration
LOG_LEVEL=INFO  # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL

# AWS Configuration (for local development)
# AWS_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-local-access-key
# AWS_SECRET_ACCESS_KEY=your-local-secret-key
# AWS_PROFILE=default  # Alternative to access key/secret

# DynamoDB Configuration
# TABLE_NAME=gearbox_catalog  # Default is set in code

# Test Configuration
TEST_API_KEY=test-api-key-12345  # API key used for testing

# =============================================================================
# GITHUB ACTIONS SECRETS
# These must be configured in your GitHub repository settings
# Go to: Settings > Secrets and variables > Actions
# =============================================================================

# Required Secrets (must be set in GitHub):
# AWS_ACCESS_KEY_ID=AKIA...  # AWS access key for deployment
# AWS_SECRET_ACCESS_KEY=...  # AWS secret key for deployment

# Optional Secrets (have defaults):
# TEST_API_KEY=test-api-key-12345  # API key for integration tests (has default)

# =============================================================================
# GITHUB ACTIONS VARIABLES
# These can be configured in your GitHub repository settings  
# Go to: Settings > Secrets and variables > Actions > Variables tab
# =============================================================================

# Optional Variables (have defaults):
# AWS_DEFAULT_REGION=us-east-1  # AWS region for deployment (default: us-east-1)
# STACK_NAME=product-selector    # CloudFormation stack name (default: product-selector)

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# For Local Development:
# 1. Copy this file to .env
# 2. Set your AWS credentials (either via AWS_* vars or AWS_PROFILE)
# 3. Adjust LOG_LEVEL as needed

# For GitHub Actions:
# 1. In your GitHub repo, go to Settings > Secrets and variables > Actions
# 2. Add the following SECRETS:
#    - AWS_ACCESS_KEY_ID (required)
#    - AWS_SECRET_ACCESS_KEY (required)
#    - TEST_API_KEY (optional, defaults to test-api-key-12345)
# 
# 3. Add the following VARIABLES (optional, all have defaults):
#    - AWS_DEFAULT_REGION (default: us-east-1)
#    - STACK_NAME (default: product-selector)

# =============================================================================
# AWS PERMISSIONS REQUIRED
# =============================================================================

# Your AWS credentials need the following permissions:
# - CloudFormation: full access to create/update/delete stacks
# - Lambda: full access to create/update/delete functions
# - DynamoDB: full access to create/update/delete tables and items
# - API Gateway: full access to create/update/delete APIs
# - IAM: permissions to create/update/delete roles and policies
# - S3: access to SAM deployment bucket
# - CloudWatch: access to create/update log groups

# Example IAM policy ARNs that provide necessary permissions:
# - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
# - arn:aws:iam::aws:policy/AWSLambda_FullAccess
# - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
# - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
# - arn:aws:iam::aws:policy/IAMFullAccess
# - arn:aws:iam::aws:policy/AmazonS3FullAccess
# - arn:aws:iam::aws:policy/CloudWatchFullAccess

# =============================================================================
# CI/CD PIPELINE OVERVIEW
# =============================================================================

# The GitHub Actions workflow includes:
# 1. Test Job:
#    - Runs unit tests with pytest
#    - Starts local SAM API and runs integration tests
#    - Uploads test results and coverage reports
# 
# 2. Security Scan Job (PR only):
#    - Runs bandit for security analysis
#    - Runs safety for dependency vulnerability checks
# 
# 3. Deploy Job (main/dev branches only):
#    - Deploys to AWS using SAM
#    - Runs integration tests against deployed resources
#    - Only runs after tests pass

# =============================================================================
# TESTING
# =============================================================================

# Local Testing Commands:
# cd lambda
# 
# Unit tests:
# PYTHONPATH="app" uv run pytest tests/unit -v
# 
# Integration tests (requires deployed stack):
# PYTHONPATH="app" uv run pytest tests/integration/test_deployed_lambda.py -v
# 
# Local API testing:
# Terminal 1: sam build && sam local start-api
# Terminal 2: PYTHONPATH="app" uv run pytest tests/integration/test_local_api.py -v

# =============================================================================
# EXAMPLE VALUES FOR REFERENCE
# =============================================================================

# Example .env file for local development:
# LOG_LEVEL=DEBUG
# AWS_PROFILE=my-dev-profile
# TEST_API_KEY=my-local-test-key