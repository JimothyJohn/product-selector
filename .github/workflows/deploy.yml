name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    env:
      PYTHONPATH: "app"
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}
      TEST_API_KEY: ${{ secrets.TEST_API_KEY || 'test-api-key-12345' }}
      LOG_LEVEL: DEBUG
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Change to lambda directory and setup
      run: |
        cd lambda
        
        # Format code
        echo "Formatting code..."
        uv run ruff format app
        
        # Validate SAM template
        echo "Validating SAM template..."
        sam validate --lint
        
        # Build the SAM application
        echo "Building SAM application..."
        sam build
    
    - name: Run unit tests
      run: |
        cd lambda
        echo "Running unit tests..."
        PYTHONPATH="app" uv run pytest tests/unit -v --tb=short --junit-xml=test-results-unit.xml
    
    - name: Start local API and run integration tests
      run: |
        cd lambda
        
        echo "Starting SAM local API..."
        sam local start-api --port 3000 &
        SAM_PID=$!
        
        # Wait for the API to be ready
        echo "Waiting for local API to start..."
        for i in {1..30}; do
          if curl -s http://localhost:3000 > /dev/null 2>&1 || [ $? -eq 7 ]; then
            echo "Local API is ready"
            break
          fi
          echo "Waiting for API... ($i/30)"
          sleep 2
        done
        
        # Run integration tests against local API
        echo "Running integration tests against local API..."
        PYTHONPATH="app" TEST_API_KEY="$TEST_API_KEY" uv run pytest tests/integration/test_local_api.py -v --tb=short --junit-xml=test-results-integration.xml
        
        # Stop the local API
        echo "Stopping local API..."
        kill $SAM_PID || true
        wait $SAM_PID 2>/dev/null || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          lambda/test-results-*.xml
        retention-days: 7
    
    - name: Upload coverage reports (if available)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          lambda/htmlcov/
          lambda/.coverage
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Install security tools
      run: |
        cd lambda
        uv add --dev bandit safety
    
    - name: Run security scan with bandit
      run: |
        cd lambda
        echo "Running bandit security scan..."
        uv run bandit -r app/ -f json -o bandit-report.json || true
        uv run bandit -r app/ || true
    
    - name: Check dependencies with safety
      run: |
        cd lambda
        echo "Checking dependencies with safety..."
        uv run safety check || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          lambda/bandit-report.json
        retention-days: 30

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    env:
      PYTHONPATH: "app"
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}
      STACK_NAME: ${{ vars.STACK_NAME || 'product-selector-dev' }}
      SAM_STACK_NAME: ${{ vars.STACK_NAME || 'product-selector-dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Deploy to AWS
      run: |
        cd lambda
        
        echo "Building SAM application..."
        sam build
        
        echo "Deploying to AWS..."
        sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name "$STACK_NAME"
    
    - name: Run integration tests against deployed API
      run: |
        cd lambda
        
        echo "Running integration tests against deployed Lambda..."
        PYTHONPATH="app" AWS_REGION="$AWS_DEFAULT_REGION" STACK_NAME="$STACK_NAME" uv run pytest tests/integration/test_deployed_lambda.py -v --tb=short --junit-xml=test-results-deployed.xml
    
    - name: Upload deployment test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-test-results
        path: |
          lambda/test-results-deployed.xml
        retention-days: 7
    
    - name: Display deployment info
      if: success()
      run: |
        echo "Deployment completed successfully!"
        echo "Stack: $STACK_NAME"
        echo "Region: $AWS_DEFAULT_REGION"
        echo "Check AWS Console for deployed resources."